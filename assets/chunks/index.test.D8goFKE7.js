import{m as i}from"./vue-test-utils.esm-bundler.CoRJjSZk.js";import"./base.BdmgHdsK.js";import{E as u}from"./el-overlay.BqfQhs6e.js";import{a as c,b as d}from"./pro-el-components.es.BbdLL6xm.js";import{_ as m}from"./index.vue_vue_type_script_setup_true_lang.99vDlG5i.js";import{d as f,i as n,g as o,v as p}from"./vi.JYQecGiw.DzZoJzDr.js";import{P as r}from"./framework.C7SOrqHQ.js";import"./vnode.7Q1GY8fL.js";import"./index.BTF4YfDF.js";import"./types.CHlFyNtD.js";import"./aria.9SHySdGF.js";import"./index.126dwtby.js";import"./isSymbol.C7jn4vLP.js";import"./isObject.C3e4t58V.js";import"./index.RKxNzSBd.js";import"./icon.D1paMUUC.js";import"./index.CacP4YLb.js";import"./refs.DxbQ4g28.js";import"./index.hhTD2MZf.js";import"./event.BB_Ol6Sd.js";import"./error.Cq9Fpw4b.js";import"./scroll.DMEu3ij1.js";import"./index.Dmme7433.js";import"./use-global-config.DIWKgMVJ.js";import"./index.CQ2QlRVi.js";import"./index.CR5w6Vik.js";import"./el-popover.DB_45-Em.js";import"./el-button.DE4WLPFu.js";import"./use-form-item.D8KyPK5_.js";import"./use-form-common-props.DDNg6-8l.js";import"./index.r5W6hzzQ.js";import"./el-popper.BuQPBkTD.js";import"./index.Bq2Ms4g2.js";import"./arrayPush.CXZMwWBu.js";import"./index.BxHDt7Km.js";import"./el-dropdown.DSgujdVA.js";import"./el-scrollbar.DH4X1zpC.js";import"./castArray.ul4E8C5D.js";import"./el-dropdown-item.l0sNRNKZ.js";import"./el-radio.DRdcRBUq.js";import"./el-checkbox.BNYvkwwK.js";import"./isEqual.BOWLGTx_.js";import"./el-tag.bXv_BIuD.js";import"./cloneDeep.D8Rcep2n.js";import"./el-input.CeBPwPDU.js";import"./typescript.Bp3YSIOJ.js";import"./index.gDhSDFSO.js";import"./index.DaRhCE74.js";import"./index.guaSBbRJ.js";import"./debounce.BwFge-ki.js";/* empty css                          *//* empty css                   */import"./el-progress.vJBajUUT.js";import"./el-image-viewer.ROfZEiPQ.js";import"./el-col.ztFTNE-e.js";import"./constants.0YSy3Igo.js";import"./el-row.CpA-NpC_.js";import"./el-tooltip.l0sNRNKZ.js";import"./el-select.DH2XqGfa.js";import"./el-menu-item.4i4sU5qB.js";import"./dayjs.min.Ba62AOpW.js";import"./commonjsHelpers.BosuxZz1.js";import"./index.BEkWwAfS.js";import"./index.Cm6lYq2D.js";import"./index.B6On7QUW.js";import"./vite-browser-external_commonjs-proxy.BC9WSf1a.js";f("modalForm 组件",()=>{n("正确渲染基础组件",async()=>{const t=i(m,{props:{modelValue:!0,title:"测试标题",fields:[{prop:"name",label:"姓名",type:"input",required:!0}]}});await r(),o(t.findComponent(u).exists()).toBe(!0),o(t.findComponent(c).exists()).toBe(!0),o(t.findComponent(d).exists()).toBe(!0),o(t.html()).toContain("测试标题")}),n("正确处理表单数据",async()=>{const t={name:"测试"},e=i(m,{props:{modelValue:!0,defaultValue:t}});o(e.vm.formData).toEqual(t),await e.setProps({defaultValue:{name:"新测试"}}),o(e.vm.formData).toEqual({name:"新测试"})}),n("正确处理按钮点击事件",async()=>{const t=p.fn(),e=p.fn(),a=p.fn(),l=i(m,{props:{modelValue:!0,"onUpdate:modelValue":a,onCancel:t,onOk:e}});await r(),await l.find("button.el-button:first-child").trigger("click"),await r(),o(t).toHaveBeenCalled(),o(a).toHaveBeenCalledWith(!1),await l.find("button.el-button--primary").trigger("click"),await r(),o(e).toHaveBeenCalled(),o(a).toHaveBeenCalledWith(!1)}),n("在视图模式下正确显示",async()=>{const t=i(m,{props:{modelValue:!0,viewMode:!0,defaultValue:{name:"测试用户"},fields:[{prop:"name",label:"姓名",type:"input"}]}});await r(),o(t.find(".el-input").exists()).toBe(!1),o(t.find(".el-form-item__content").text()).toBe("测试用户");const e=t.find("button.el-button--primary");o(e.text()).toBe("确定")}),n("正确处理表单重置",async()=>{const t={name:"测试"},e=p.fn(),a=i(m,{props:{modelValue:!0,defaultValue:t,resetOnClose:!0,"onUpdate:modelValue":e}});await r(),a.vm.formData={name:"新值"},await r(),o(a.vm.formData).toEqual({name:"新值"}),await a.findAll("button.el-button").filter(s=>s.text().includes("取消"))[0].trigger("click"),await r(),o(a.vm.formData).toEqual(t),o(e).toHaveBeenCalledWith(!1)}),n("正确响应表单数据的变化",async()=>{const t=i(m,{props:{modelValue:!0,defaultValue:{name:"初始值"}}});await r(),o(t.vm.formData).toEqual({name:"初始值"}),t.vm.formData={name:"修改后的值"},await r(),o(t.vm.formData).toEqual({name:"修改后的值"}),await t.setProps({defaultValue:{name:"通过props更新"}}),await r(),o(t.vm.formData).toEqual({name:"通过props更新"})}),n("正确显示加载状态",async()=>{const t=i(m,{props:{modelValue:!0,loading:!0}});await r(),o(t.find(".el-overlay-dialog").exists()).toBe(!0);const e=t.findAll(".el-button").filter(a=>a.text().includes("确定"))[0];o(e).not.toBeTruthy()}),n("应该在提交前进行表单验证",async()=>{const t=p.fn(),e=i(m,{props:{modelValue:!0,fields:[{prop:"name",label:"姓名",type:"input",required:!0}],onOk:t}});await r(),await e.findAll("button").find(l=>l.text().includes("提交")).trigger("click"),o(t).not.toHaveBeenCalled()}),n("应该支持自定义操作按钮",async()=>{const t=[{text:"保存草稿",onClick:p.fn()},{text:"提交",type:"primary",onClick:p.fn()}],e=i(m,{props:{modelValue:!0,actions:t}});await r();const a=e.findAll(".el-button");o(a).toHaveLength(t.length),o(a[0].text()).toBe("保存草稿"),o(a[1].text()).toBe("提交")})});
