import{m as i}from"./vue-test-utils.esm-bundler.CXEWdIcj.js";import"./base.D1hT_OMg.js";import{E as u}from"./el-overlay.BCS05DOt.js";import{a as c,b as d}from"./pro-el-components.es.D2RWaTV6.js";import{_ as m}from"./index.vue_vue_type_script_setup_true_lang.aUfQXu8y.js";import{d as f,i as n,g as o,v as p}from"./vi.JYQecGiw.CwfDdTVD.js";import{P as r}from"./framework.CCndWvNN.js";import"./vnode.BEnbcVWi.js";import"./index.BESs4zff.js";import"./types.BG7Bq31m.js";import"./aria.9SHySdGF.js";import"./index.B1pLMPru.js";import"./isSymbol.C7jn4vLP.js";import"./isObject.C3e4t58V.js";import"./index.dVC2hAAQ.js";import"./icon.ZlYHZ6bL.js";import"./index.l2C8AFQu.js";import"./refs.B6nQtqsB.js";import"./index.CQNcN25s.js";import"./event.BB_Ol6Sd.js";import"./error.Cq9Fpw4b.js";import"./scroll.I75wR7Fj.js";import"./index.DKuONPA3.js";import"./use-global-config.Cy85fLye.js";import"./index.BTWm3S8P.js";import"./index.CmxAuiKz.js";import"./el-popover.D2JF-F-v.js";import"./el-button.Ks_KV28J.js";import"./use-form-item.Br6EJJ4d.js";import"./use-form-common-props.CD1z-U6Z.js";import"./index.r5W6hzzQ.js";import"./el-popper.DVtARkBh.js";import"./index.BerH9hGA.js";import"./arrayPush.CXZMwWBu.js";import"./index.DT7TJvLG.js";import"./el-dropdown.BOifsY6J.js";import"./el-scrollbar.D7CKjqK8.js";import"./castArray.nOJHwnz6.js";import"./el-dropdown-item.l0sNRNKZ.js";import"./el-radio.DwTHR0gg.js";import"./el-checkbox.vp91cqq1.js";import"./isEqual.BFy4LUG1.js";import"./el-tag.eG6nSIS7.js";import"./cloneDeep.CIaHHukw.js";import"./el-input.BSgJ4dcH.js";import"./typescript.Bp3YSIOJ.js";import"./index.BSzUxMWT.js";import"./index.DCylGgGu.js";import"./index.yFO58wlI.js";import"./debounce.BwFge-ki.js";/* empty css                          *//* empty css                   */import"./el-progress.BRIRdYmT.js";import"./el-image-viewer.Dja78u7m.js";import"./el-col.CFugVZsV.js";import"./constants.0YSy3Igo.js";import"./el-row.CHA5sZ-H.js";import"./el-tooltip.l0sNRNKZ.js";import"./el-select.DD745kxU.js";import"./el-menu-item._RQlHeQG.js";import"./dayjs.min.Ba62AOpW.js";import"./commonjsHelpers.BosuxZz1.js";import"./index.BxCfNOki.js";import"./index.CQyIUMkD.js";import"./index.B6On7QUW.js";import"./vite-browser-external_commonjs-proxy.BC9WSf1a.js";f("modalForm 组件",()=>{n("正确渲染基础组件",async()=>{const t=i(m,{props:{modelValue:!0,title:"测试标题",fields:[{prop:"name",label:"姓名",type:"input",required:!0}]}});await r(),o(t.findComponent(u).exists()).toBe(!0),o(t.findComponent(c).exists()).toBe(!0),o(t.findComponent(d).exists()).toBe(!0),o(t.html()).toContain("测试标题")}),n("正确处理表单数据",async()=>{const t={name:"测试"},e=i(m,{props:{modelValue:!0,defaultValue:t}});o(e.vm.formData).toEqual(t),await e.setProps({defaultValue:{name:"新测试"}}),o(e.vm.formData).toEqual({name:"新测试"})}),n("正确处理按钮点击事件",async()=>{const t=p.fn(),e=p.fn(),a=p.fn(),l=i(m,{props:{modelValue:!0,"onUpdate:modelValue":a,onCancel:t,onOk:e}});await r(),await l.find("button.el-button:first-child").trigger("click"),await r(),o(t).toHaveBeenCalled(),o(a).toHaveBeenCalledWith(!1),await l.find("button.el-button--primary").trigger("click"),await r(),o(e).toHaveBeenCalled(),o(a).toHaveBeenCalledWith(!1)}),n("在视图模式下正确显示",async()=>{const t=i(m,{props:{modelValue:!0,viewMode:!0,defaultValue:{name:"测试用户"},fields:[{prop:"name",label:"姓名",type:"input"}]}});await r(),o(t.find(".el-input").exists()).toBe(!1),o(t.find(".el-form-item__content").text()).toBe("测试用户");const e=t.find("button.el-button--primary");o(e.text()).toBe("确定")}),n("正确处理表单重置",async()=>{const t={name:"测试"},e=p.fn(),a=i(m,{props:{modelValue:!0,defaultValue:t,resetOnClose:!0,"onUpdate:modelValue":e}});await r(),a.vm.formData={name:"新值"},await r(),o(a.vm.formData).toEqual({name:"新值"}),await a.findAll("button.el-button").filter(s=>s.text().includes("取消"))[0].trigger("click"),await r(),o(a.vm.formData).toEqual(t),o(e).toHaveBeenCalledWith(!1)}),n("正确响应表单数据的变化",async()=>{const t=i(m,{props:{modelValue:!0,defaultValue:{name:"初始值"}}});await r(),o(t.vm.formData).toEqual({name:"初始值"}),t.vm.formData={name:"修改后的值"},await r(),o(t.vm.formData).toEqual({name:"修改后的值"}),await t.setProps({defaultValue:{name:"通过props更新"}}),await r(),o(t.vm.formData).toEqual({name:"通过props更新"})}),n("正确显示加载状态",async()=>{const t=i(m,{props:{modelValue:!0,loading:!0}});await r(),o(t.find(".el-overlay-dialog").exists()).toBe(!0);const e=t.findAll(".el-button").filter(a=>a.text().includes("确定"))[0];o(e).not.toBeTruthy()}),n("应该在提交前进行表单验证",async()=>{const t=p.fn(),e=i(m,{props:{modelValue:!0,fields:[{prop:"name",label:"姓名",type:"input",required:!0}],onOk:t}});await r(),await e.findAll("button").find(l=>l.text().includes("提交")).trigger("click"),o(t).not.toHaveBeenCalled()}),n("应该支持自定义操作按钮",async()=>{const t=[{text:"保存草稿",onClick:p.fn()},{text:"提交",type:"primary",onClick:p.fn()}],e=i(m,{props:{modelValue:!0,actions:t}});await r();const a=e.findAll(".el-button");o(a).toHaveLength(t.length),o(a[0].text()).toBe("保存草稿"),o(a[1].text()).toBe("提交")})});
