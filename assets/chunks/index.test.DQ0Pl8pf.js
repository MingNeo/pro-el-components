import{m as e}from"./vue-test-utils.esm-bundler.CoRJjSZk.js";import"./base.BdmgHdsK.js";import{E as m}from"./el-radio.DRdcRBUq.js";import"./el-input.CeBPwPDU.js";import"./el-popper.BuQPBkTD.js";import"./el-tag.bXv_BIuD.js";import"./el-checkbox.BNYvkwwK.js";import"./el-scrollbar.DH4X1zpC.js";import{_ as p}from"./index.vue_vue_type_script_setup_true_lang.NprGkgRy.js";import{d as a,i as r,g as t,v as l}from"./vi.JYQecGiw.DzZoJzDr.js";import"./framework.C7SOrqHQ.js";import"./index.BxHDt7Km.js";import"./index.126dwtby.js";import"./isSymbol.C7jn4vLP.js";import"./isObject.C3e4t58V.js";import"./index.CacP4YLb.js";import"./index.RKxNzSBd.js";import"./types.CHlFyNtD.js";import"./index.CQ2QlRVi.js";import"./event.BB_Ol6Sd.js";import"./use-form-common-props.DDNg6-8l.js";import"./index.Dmme7433.js";import"./index.CR5w6Vik.js";import"./index.Bq2Ms4g2.js";import"./arrayPush.CXZMwWBu.js";import"./use-form-item.D8KyPK5_.js";import"./error.Cq9Fpw4b.js";import"./index.hhTD2MZf.js";import"./isEqual.BOWLGTx_.js";import"./index.BTF4YfDF.js";import"./aria.9SHySdGF.js";import"./scroll.DMEu3ij1.js";import"./cloneDeep.D8Rcep2n.js";import"./index.guaSBbRJ.js";import"./index.DaRhCE74.js";import"./debounce.BwFge-ki.js";import"./icon.D1paMUUC.js";import"./typescript.Bp3YSIOJ.js";import"./index.gDhSDFSO.js";import"./commonjsHelpers.BosuxZz1.js";import"./vite-browser-external_commonjs-proxy.BC9WSf1a.js";a("cascader 组件",()=>{const i=[{value:"1",label:"选项1",children:[{value:"1-1",label:"选项1-1"}]},{value:"2",label:"选项2"}];r("应该正确渲染 el-cascader",()=>{const o=e(p,{props:{modelValue:[]}});t(o.findComponent(m).exists()).toBe(!0)}),r("在视图模式下应该显示文本而不是选择器",()=>{const o=e(p,{props:{viewMode:!0,modelValue:["1","1-1"],options:i}});t(o.findComponent(m).exists()).toBe(!1),t(o.find("span").exists()).toBe(!0)}),r("应该正确触发值更新事件",async()=>{const o=e(p,{props:{modelValue:[],options:i}});await o.findComponent(m).vm.$emit("change",["1","1-1"]),t(o.emitted("update:modelValue")).toBeTruthy(),t(o.emitted("update:modelValue")[0]).toEqual(["1-1"]),t(o.emitted("change")).toBeTruthy()}),r("应该正确加载远程数据",async()=>{const o=l.fn().mockResolvedValue(i);e(p,{props:{modelValue:[],service:o}}),t(o).toHaveBeenCalled()}),r("在多选模式下应该正确处理值",async()=>{const o=e(p,{props:{modelValue:[],options:i,props:{multiple:!0}}});await o.findComponent(m).vm.$emit("change",[["1","1-1"],["2"]]),t(o.emitted("update:modelValue")).toBeTruthy(),t(o.emitted("update:modelValue")[0]).toEqual([["1-1","2"]])}),r("应该正确查找并显示标签路径",()=>{const o=e(p,{props:{viewMode:!0,modelValue:"1-1",options:i}});t(o.text()).toContain("选项1-选项1-1")}),r("应该正确处理无效值",()=>{const o=e(p,{props:{viewMode:!0,modelValue:"invalid-value",options:i}});t(o.text()).toBe("-无-")})});
