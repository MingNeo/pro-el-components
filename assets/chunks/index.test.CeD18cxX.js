import{m as e}from"./vue-test-utils.esm-bundler.CXEWdIcj.js";import"./base.D1hT_OMg.js";import{E as m}from"./el-radio.DwTHR0gg.js";import"./el-input.BSgJ4dcH.js";import"./el-popper.DVtARkBh.js";import"./el-tag.eG6nSIS7.js";import"./el-checkbox.vp91cqq1.js";import"./el-scrollbar.D7CKjqK8.js";import{_ as p}from"./index.vue_vue_type_script_setup_true_lang.C0Y1XnZu.js";import{d as a,i as r,g as t,v as l}from"./vi.JYQecGiw.CwfDdTVD.js";import"./framework.CCndWvNN.js";import"./index.DT7TJvLG.js";import"./index.B1pLMPru.js";import"./isSymbol.C7jn4vLP.js";import"./isObject.C3e4t58V.js";import"./index.l2C8AFQu.js";import"./index.dVC2hAAQ.js";import"./types.BG7Bq31m.js";import"./index.BTWm3S8P.js";import"./event.BB_Ol6Sd.js";import"./use-form-common-props.CD1z-U6Z.js";import"./index.DKuONPA3.js";import"./index.CmxAuiKz.js";import"./index.BerH9hGA.js";import"./arrayPush.CXZMwWBu.js";import"./use-form-item.Br6EJJ4d.js";import"./error.Cq9Fpw4b.js";import"./index.CQNcN25s.js";import"./isEqual.BFy4LUG1.js";import"./index.BESs4zff.js";import"./aria.9SHySdGF.js";import"./scroll.I75wR7Fj.js";import"./cloneDeep.CIaHHukw.js";import"./index.yFO58wlI.js";import"./index.DCylGgGu.js";import"./debounce.BwFge-ki.js";import"./icon.ZlYHZ6bL.js";import"./typescript.Bp3YSIOJ.js";import"./index.BSzUxMWT.js";import"./commonjsHelpers.BosuxZz1.js";import"./vite-browser-external_commonjs-proxy.BC9WSf1a.js";a("cascader 组件",()=>{const i=[{value:"1",label:"选项1",children:[{value:"1-1",label:"选项1-1"}]},{value:"2",label:"选项2"}];r("应该正确渲染 el-cascader",()=>{const o=e(p,{props:{modelValue:[]}});t(o.findComponent(m).exists()).toBe(!0)}),r("在视图模式下应该显示文本而不是选择器",()=>{const o=e(p,{props:{viewMode:!0,modelValue:["1","1-1"],options:i}});t(o.findComponent(m).exists()).toBe(!1),t(o.find("span").exists()).toBe(!0)}),r("应该正确触发值更新事件",async()=>{const o=e(p,{props:{modelValue:[],options:i}});await o.findComponent(m).vm.$emit("change",["1","1-1"]),t(o.emitted("update:modelValue")).toBeTruthy(),t(o.emitted("update:modelValue")[0]).toEqual(["1-1"]),t(o.emitted("change")).toBeTruthy()}),r("应该正确加载远程数据",async()=>{const o=l.fn().mockResolvedValue(i);e(p,{props:{modelValue:[],service:o}}),t(o).toHaveBeenCalled()}),r("在多选模式下应该正确处理值",async()=>{const o=e(p,{props:{modelValue:[],options:i,props:{multiple:!0}}});await o.findComponent(m).vm.$emit("change",[["1","1-1"],["2"]]),t(o.emitted("update:modelValue")).toBeTruthy(),t(o.emitted("update:modelValue")[0]).toEqual([["1-1","2"]])}),r("应该正确查找并显示标签路径",()=>{const o=e(p,{props:{viewMode:!0,modelValue:"1-1",options:i}});t(o.text()).toContain("选项1-选项1-1")}),r("应该正确处理无效值",()=>{const o=e(p,{props:{viewMode:!0,modelValue:"invalid-value",options:i}});t(o.text()).toBe("-无-")})});
