import{_ as a,C as d,c as e,o as n,a4 as s,G as h}from"./chunks/framework.CCndWvNN.js";const y=JSON.parse('{"title":"useStreamData","description":"","frontmatter":{},"headers":[],"relativePath":"composables/useStreamData.md","filePath":"composables/useStreamData.md"}'),l={name:"composables/useStreamData.md"};function r(p,t,k,o,E,g){const i=d("demo");return n(),e("div",null,[t[0]||(t[0]=s('<h1 id="usestreamdata" tabindex="-1">useStreamData <a class="header-anchor" href="#usestreamdata" aria-label="Permalink to &quot;useStreamData&quot;">​</a></h1><p><code>useStreamData</code> 是一个用于处理 Server-Sent Events (SSE) 流数据的 Vue Composable。</p><h2 id="特性" tabindex="-1">特性 <a class="header-anchor" href="#特性" aria-label="Permalink to &quot;特性&quot;">​</a></h2><ul><li>支持 SSE 数据流的接收和处理</li><li>完整的状态管理和错误处理</li><li>可自定义数据格式化</li><li>支持流的启动、停止和重置</li><li>提供完整的生命周期钩子</li></ul><h2 id="用法" tabindex="-1">用法 <a class="header-anchor" href="#用法" aria-label="Permalink to &quot;用法&quot;">​</a></h2>',5)),h(i,{src:"@/composables/useStreamData/demos/demo1.vue"}),t[1]||(t[1]=s(`<div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { useStreamData } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pro-el-components&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isStreaming</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useStreamData</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/api/stream&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onMessage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">chunk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">raw</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;收到新消息:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, chunk)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onFinish</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;流结束&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 开始接收流数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 停止接收</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">stop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 重置状态</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">reset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><h2 id="配置项" tabindex="-1">配置项 <a class="header-anchor" href="#配置项" aria-label="Permalink to &quot;配置项&quot;">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>url</td><td><code>string</code></td><td>-</td><td>SSE 接口地址</td></tr><tr><td>method</td><td><code>&#39;get&#39; | &#39;post&#39; | &#39;put&#39; | &#39;delete&#39;</code></td><td>&#39;post&#39;\`</td><td>请求方法</td></tr><tr><td>headers</td><td><code>Record&lt;string, string&gt;</code></td><td>-</td><td>请求头</td></tr><tr><td>paramKey</td><td><code>string</code></td><td>&#39;content&#39;</td><td>字符串参数的键名</td></tr><tr><td>formatPayload</td><td><code>(data: any) =&gt; any</code></td><td>-</td><td>请求数据格式化函数</td></tr><tr><td>formatResponse</td><td><code>(response: StreamResponse) =&gt; string</code></td><td>-</td><td>响应数据格式化函数</td></tr><tr><td>onStart</td><td><code>() =&gt; void</code></td><td>-</td><td>流开始时的回调</td></tr><tr><td>onMessage</td><td><code>(text: string, raw: StreamResponse) =&gt; void</code></td><td>-</td><td>收到消息的回调</td></tr><tr><td>onFinish</td><td><code>() =&gt; void</code></td><td>-</td><td>流结束时的回调</td></tr><tr><td>onError</td><td><code>(error: Error) =&gt; void</code></td><td>-</td><td>发生错误时的回调</td></tr><tr><td>onCancel</td><td><code>() =&gt; void</code></td><td>-</td><td>流被取消时的回调</td></tr></tbody></table><h2 id="返回值" tabindex="-1">返回值 <a class="header-anchor" href="#返回值" aria-label="Permalink to &quot;返回值&quot;">​</a></h2><table tabindex="0"><thead><tr><th>参数</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td><code>Ref&lt;StreamStatus&gt;</code></td><td>当前状态</td></tr><tr><td>content</td><td><code>Ref&lt;string&gt;</code></td><td>累积的内容</td></tr><tr><td>error</td><td><code>Ref&lt;Error | null&gt;</code></td><td>错误信息</td></tr><tr><td>streamId</td><td><code>Ref&lt;string&gt;</code></td><td>流ID</td></tr><tr><td>isStreaming</td><td><code>ComputedRef&lt;boolean&gt;</code></td><td>是否正在流式传输</td></tr><tr><td>start</td><td><code>(payload: Record&lt;string, any&gt; | string) =&gt; Promise&lt;void&gt;</code></td><td>开始流式传输</td></tr><tr><td>stop</td><td><code>() =&gt; void</code></td><td>停止流式传输</td></tr><tr><td>reset</td><td><code>() =&gt; void</code></td><td>重置状态</td></tr></tbody></table>`,5))])}const F=a(l,[["render",r]]);export{y as __pageData,F as default};
