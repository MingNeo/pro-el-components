import{_ as e,c as r,o,a4 as l}from"./chunks/framework.C7SOrqHQ.js";const _=JSON.parse('{"title":"指南","description":"","frontmatter":{},"headers":[],"relativePath":"guide/index.md","filePath":"guide/index.md"}'),n={name:"guide/index.md"};function i(a,t,s,g,d,c){return o(),r("div",null,t[0]||(t[0]=[l('<h1 id="指南" tabindex="-1">指南 <a class="header-anchor" href="#指南" aria-label="Permalink to &quot;指南&quot;">​</a></h1><blockquote><p>🚀 基于 Element Plus 的企业级高级组件库，专为中台系统打造，提供开箱即用的业务组件和解决方案。</p></blockquote><p>在中台开发中，封装高级组件是常见的行为。市面上也有不少成熟的高级组件库，但是很遗憾，这些组件库的设计思路，<strong>基本都是错误的</strong>。它们虽然能快速编写页面，但通通存在以下问题：</p><h3 id="😓-其他高级组件库的痛点" tabindex="-1">😓 其他高级组件库的痛点 <a class="header-anchor" href="#😓-其他高级组件库的痛点" aria-label="Permalink to &quot;😓 其他高级组件库的痛点&quot;">​</a></h3><ul><li><strong>❌ 过度封装</strong> - 难以灵活使用，无法根据需求自由定制样式</li><li><strong>❌ 配置复杂</strong> - 学习成本高，配置文件冗长难懂</li><li><strong>❌ 缺乏渐进性</strong> - 无法从原始组件库渐进式升降级</li><li><strong>❌ 组合困难</strong> - 如无法在表单中自由搭配普通表单控件、HTML元素，除非创建一个自定义组件用作Field</li><li><strong>❌ 联动复杂</strong> - 如表单联动需要复杂配置，代码可读性差，新人难接手</li></ul><h2 id="✨-特性" tabindex="-1">✨ 特性 <a class="header-anchor" href="#✨-特性" aria-label="Permalink to &quot;✨ 特性&quot;">​</a></h2><ul><li>✅ <strong>完全兼容</strong> - 100% 兼容 Element Plus 原始用法，改个组件名即可无缝升级。同时，你完全可以配合原始用法来自由扩充你想要的功能。</li><li>🎯 <strong>企业级</strong> - 专注中台业务场景，提供高质量的业务组件</li><li>🔧 <strong>开箱即用</strong> - 丰富的业务组件，快速构建中台应用</li><li>🎨 <strong>优雅易用</strong> - 基于 Element Plus 设计语言，保持一致的用户体验</li><li>🔀 <strong>TypeScript</strong> - 完整的 TypeScript 支持，提供优秀的开发体验</li><li>🎭 <strong>主题定制</strong> - 支持主题定制，满足不同品牌需求</li><li>📦 <strong>按需加载</strong> - 支持树摇优化，减小打包体积</li></ul>',7)]))}const p=e(n,[["render",i]]);export{_ as __pageData,p as default};
